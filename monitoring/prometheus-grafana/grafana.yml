apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana-prometheus
  namespace: kube-system
  labels:
    app: grafana
    component: core
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: grafana
        component: core
    spec:
      containers:
      #- image: grafana/grafana:4.2.0
      - image: grafana/grafana:5.1.0
        name: grafana-core
        imagePullPolicy: IfNotPresent
        # env:
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
          # The following env variables set up basic auth twith the default admin user and admin password.
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          #- name: GF_AUTH_ANONYMOUS_ORG_ROLE
          #  value: Admin
          #- name: GF_SERVER_ROOT_URL
          #  value: /
          - name: GF_PATHS_DATA
            value: /var/data
          - name: GF_PATHS_LOG
            value: /var/log
          # does not really work, because of template variables in exported dashboards:
          # - name: GF_DASHBOARDS_JSON_ENABLED
          #   value: "true"
        readinessProbe:
          httpGet:
            path: /login
            port: 3000
          # initialDelaySeconds: 30
          # timeoutSeconds: 1
        volumeMounts:
        - name: grafana-persistent-storage
          mountPath: /var
        volumeMounts:
        - name: grafana-pv-data
          mountPath: /var/data/
        - name: grafana-pv-log
          mountPath: /var/log/
      volumes:
      - name: grafana-pv-data
        emptyDir: {}
      - name: grafana-pv-log
        emptyDir: {}
---
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: grafana
#   namespace: kube-system
# spec:
#   rules:
#   - host: <yourchoice>.<cluster-id>.k8s.gigantic.io
#     http:
#       paths:
#       - path: /
#         backend:
#          serviceName: grafana
#          servicePort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-prometheus
  namespace: kube-system
  labels:
    app: grafana
    component: core
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: grafana
    component: core